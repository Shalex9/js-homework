/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$arrow-l-name: 'arrow-l';
$arrow-l-x: 0px;
$arrow-l-y: 128px;
$arrow-l-offset-x: 0px;
$arrow-l-offset-y: -128px;
$arrow-l-width: 30px;
$arrow-l-height: 55px;
$arrow-l-total-width: 33px;
$arrow-l-total-height: 238px;
$arrow-l-image: 'sprite.png';
$arrow-l: (0px, 128px, 0px, -128px, 30px, 55px, 33px, 238px, '../img/sprite.png', 'arrow-l', );
$arrow-r-name: 'arrow-r';
$arrow-r-x: 0px;
$arrow-r-y: 183px;
$arrow-r-offset-x: 0px;
$arrow-r-offset-y: -183px;
$arrow-r-width: 30px;
$arrow-r-height: 55px;
$arrow-r-total-width: 33px;
$arrow-r-total-height: 238px;
$arrow-r-image: 'sprite.png';
$arrow-r: (0px, 183px, 0px, -183px, 30px, 55px, 33px, 238px, '../img/sprite.png', 'arrow-r', );
$partners-icon1-name: 'partnersIcon1';
$partners-icon1-x: 0px;
$partners-icon1-y: 0px;
$partners-icon1-offset-x: 0px;
$partners-icon1-offset-y: 0px;
$partners-icon1-width: 32px;
$partners-icon1-height: 32px;
$partners-icon1-total-width: 33px;
$partners-icon1-total-height: 238px;
$partners-icon1-image: 'sprite.png';
$partners-icon1: (0px, 0px, 0px, 0px, 32px, 32px, 33px, 238px, '../img/sprite.png', 'partnersIcon1', );
$partners-icon2-name: 'partnersIcon2';
$partners-icon2-x: 0px;
$partners-icon2-y: 32px;
$partners-icon2-offset-x: 0px;
$partners-icon2-offset-y: -32px;
$partners-icon2-width: 32px;
$partners-icon2-height: 32px;
$partners-icon2-total-width: 33px;
$partners-icon2-total-height: 238px;
$partners-icon2-image: 'sprite.png';
$partners-icon2: (0px, 32px, 0px, -32px, 32px, 32px, 33px, 238px, '../img/sprite.png', 'partnersIcon2', );
$partners-icon3-name: 'partnersIcon3';
$partners-icon3-x: 0px;
$partners-icon3-y: 64px;
$partners-icon3-offset-x: 0px;
$partners-icon3-offset-y: -64px;
$partners-icon3-width: 33px;
$partners-icon3-height: 32px;
$partners-icon3-total-width: 33px;
$partners-icon3-total-height: 238px;
$partners-icon3-image: 'sprite.png';
$partners-icon3: (0px, 64px, 0px, -64px, 33px, 32px, 33px, 238px, '../img/sprite.png', 'partnersIcon3', );
$partners-icon4-name: 'partnersIcon4';
$partners-icon4-x: 0px;
$partners-icon4-y: 96px;
$partners-icon4-offset-x: 0px;
$partners-icon4-offset-y: -96px;
$partners-icon4-width: 33px;
$partners-icon4-height: 32px;
$partners-icon4-total-width: 33px;
$partners-icon4-total-height: 238px;
$partners-icon4-image: 'sprite.png';
$partners-icon4: (0px, 96px, 0px, -96px, 33px, 32px, 33px, 238px, '../img/sprite.png', 'partnersIcon4', );
$spritesheet-width: 33px;
$spritesheet-height: 238px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($arrow-l, $arrow-r, $partners-icon1, $partners-icon2, $partners-icon3, $partners-icon4, );
$spritesheet: (33px, 238px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
